{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ClimbDataService {\n  constructor(http) {\n    this.http = http;\n    // url to web api\n    this.climbUrl = 'http://localhost:3001/api/climbs';\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  //error handling\n  handleError(operation = 'operation', result) {\n    return error => {\n      console.error(error);\n      return of(result);\n    };\n  }\n  //get climbs\n  getClimbs() {\n    return this.http.get(this.climbUrl).pipe(tap(_ => console.log('fetched climbs')), catchError(this.handleError('get climbs', [])));\n  }\n  //get single climb by id\n  getClimb(id) {\n    const url = `${this.climbUrl}/${id}`;\n    return this.http.get(url).pipe(tap(_ => console.log(`fetched climb id = ${id}`)), catchError(this.handleError('get climbs')));\n  }\n  //add climb\n  addClimb(climb) {\n    return this.http.post(this.climbUrl, climb, this.httpOptions).pipe(tap(newClimb => console.log(`added climb with id = ${newClimb.id}`)), catchError(this.handleError('add climb')));\n  }\n  //update climb\n  updateClimb(climb) {\n    return this.http.put(this.climbUrl, climb, this.httpOptions).pipe(tap(_ => console.log(`updated climb id = ${climb.id}`)), catchError(this.handleError('updated climb')));\n  }\n  //delete climb\n  deleteClimb(id) {\n    const url = `${this.climbUrl}/${id}`;\n    return this.http.delete(url, this.httpOptions).pipe(tap(_ => console.log(`deleted climb id = ${id}`)));\n  }\n  //search climbs\n  searchClimbs(term) {\n    //if not term return empty array\n    if (!term.trim()) {\n      return of([]);\n    }\n    return this.http.get(`${this.climbUrl}/?name=${term}`).pipe(tap(x => x.length ? console.log(`found climbs matching \"${term}\"`) : console.log(`found no climbs matching \"${term}\"`)), catchError(this.handleError('searchclimbs', [])));\n  }\n}\nClimbDataService.ɵfac = function ClimbDataService_Factory(t) {\n  return new (t || ClimbDataService)(i0.ɵɵinject(i1.HttpClient));\n};\nClimbDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ClimbDataService,\n  factory: ClimbDataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","of","tap","catchError","ClimbDataService","constructor","http","headers","handleError","operation","result","error","console","getClimbs","get","climbUrl","pipe","_","log","getClimb","id","url","addClimb","climb","post","httpOptions","newClimb","updateClimb","put","deleteClimb","delete","searchClimbs","term","trim","x","length","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\dmkna\\Desktop\\angluar\\beta-book\\src\\app\\climb-data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Climb } from './climb';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ClimbDataService {\n  constructor(private http: HttpClient) {}\n\n  // url to web api\n  private climbUrl = 'http://localhost:3001/api/climbs';\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\n  };\n\n  //error handling\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n      console.error(error);\n      return of(result as T);\n    };\n  }\n\n  //get climbs\n  getClimbs(): Observable<Climb[]> {\n    return this.http.get<Climb[]>(this.climbUrl).pipe(\n      tap((_) => console.log('fetched climbs')),\n      catchError(this.handleError<Climb[]>('get climbs', []))\n    );\n  }\n\n  //get single climb by id\n  getClimb(id: number): Observable<Climb> {\n    const url = `${this.climbUrl}/${id}`;\n    return this.http.get<Climb>(url).pipe(\n      tap((_) => console.log(`fetched climb id = ${id}`)),\n      catchError(this.handleError<Climb>('get climbs'))\n    );\n  }\n\n  //add climb\n\n  addClimb(climb: Climb): Observable<Climb> {\n    return this.http.post<Climb>(this.climbUrl, climb, this.httpOptions).pipe(\n      tap((newClimb: Climb) =>\n        console.log(`added climb with id = ${newClimb.id}`)\n      ),\n      catchError(this.handleError<Climb>('add climb'))\n    );\n  }\n\n  //update climb\n  updateClimb(climb: Climb): Observable<any> {\n    return this.http.put(this.climbUrl, climb, this.httpOptions).pipe(\n      tap((_) => console.log(`updated climb id = ${climb.id}`)),\n      catchError(this.handleError<any>('updated climb'))\n    );\n  }\n\n  //delete climb\n  deleteClimb(id: number): Observable<Climb> {\n    const url = `${this.climbUrl}/${id}`;\n    return this.http\n      .delete<Climb>(url, this.httpOptions)\n      .pipe(tap((_) => console.log(`deleted climb id = ${id}`)));\n  }\n\n  //search climbs\n  searchClimbs(term: string): Observable<Climb[]> {\n    //if not term return empty array\n    if (!term.trim()) {\n      return of([]);\n    }\n    return this.http.get<Climb[]>(`${this.climbUrl}/?name=${term}`).pipe(\n      tap((x) =>\n        x.length\n          ? console.log(`found climbs matching \"${term}\"`)\n          : console.log(`found no climbs matching \"${term}\"`)\n      ),\n      catchError(this.handleError<Climb[]>('searchclimbs', []))\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}